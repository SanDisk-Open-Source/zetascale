add_definitions(-std=gnu99 -fgnu89-inline)
#add parameter here as SET(testname_param arg1 arg2 ...)
SET(default_param 1 8 10000)
SET(fdf_multi_test_param 1 8 1000)
SET(fdf_mput_param 1000 100 10)

file( GLOB TEST_SOURCES *.c )
foreach( test_src_file ${TEST_SOURCES} )
	IF(NOT ${test_src_file} MATCHES "/test.c")
		get_filename_component(testname ${test_src_file} NAME_WE)
		add_executable(${testname} ${test_src_file} test.c)
        IF(BTREEHACK)
		    add_executable(${testname}_btree ${test_src_file} test.c)
        ENDIF(BTREEHACK)
		add_dependencies(${testname} fdf)
        IF(BTREEHACK)
		    add_dependencies(${testname}_btree fdf)
        ENDIF(BTREEHACK)
        IF(NOT ${testname}_param)
            #MESSAGE(param is  ${default_param})
		    add_test(${testname} ${CMAKE_CURRENT_BINARY_DIR}/${testname} ${default_param})
            IF(BTREEHACK)
		        add_test(${testname}_btree ${CMAKE_CURRENT_BINARY_DIR}/${testname}_btree ${default_param})
            ENDIF(BTREEHACK)
        ELSE(NOT ${testname}_param)
            #MESSAGE(param is  ${${testname}_param})
		    add_test(${testname} ${CMAKE_CURRENT_BINARY_DIR}/${testname} ${${testname}_param})
            IF(BTREEHACK)
		        add_test(${testname}_btree ${CMAKE_CURRENT_BINARY_DIR}/${testname}_btree ${${testname}_param})
            ENDIF(BTREEHACK)
        ENDIF(NOT ${testname}_param)
		target_link_libraries( ${testname} fdfdll dl pthread aio event
snappy)
        IF(BTREEHACK)
		    target_link_libraries( ${testname}_btree btreedll dl pthread
aio event snappy)
        ENDIF(BTREEHACK)
	ENDIF(NOT ${test_src_file} MATCHES "/test.c")
endforeach(test_src_file ${TEST_SOURCES})

